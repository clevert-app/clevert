name: asset_jpegxl
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: Cache # the post step for this will upload jpegxl.tar if not hit
        id: cache
        uses: actions/cache@v4
        with:
          enableCrossOsArchive: true
          key: "asset_jpegxl_8835f5d"
          path: jpegxl.tar
      - name: Build
        if: steps.cache.outputs.cache-hit != 'true'
        shell: sudo bash -e {0}
        run: |
          curl -L https://github.com/libjxl/libjxl/archive/8835f5dfc4857f46277f6c703e47ac7817bd7aed.tar.gz | tar -zx
          mv libjxl-* jpegxl
          cd jpegxl
          sed -i  deps.sh -e 's|download_github testdata|#|'
          ./deps.sh
          cat <<EOF >tools/multicall.cc
          #include <stddef.h>
          #include <string.h>
          #include "jxlinfo.c"
          #include "cjxl_main.cc"
          #include "djxl_main.cc"
          #include "cjpegli.cc"
          #include "djpegli.cc"
          #if defined(WIN32) || defined(_WIN32)
          #define PATH_SEPARATOR '\\\\'
          #else
          #define PATH_SEPARATOR '/'
          #endif
          int main(int argc, const char *argv[]) {
            if (argc <= 0) {
              return 1;
            }
            const char *argv0 = strrchr(argv[0], PATH_SEPARATOR);
            if (argv0 == NULL) {
              argv0 = argv[0];
            } else {
              argv0++;
            }
          before:
            if (argc <= 0) {
              return 1;
            } else if (strcmp(argv0, "jxlinfo") == 0) {
              return cmd_jxlinfo_main(argc, argv);
            } else if (strcmp(argv0, "cjxl") == 0) {
              return cmd_cjxl_main(argc, argv);
            } else if (strcmp(argv0, "djxl") == 0) {
              return cmd_djxl_main(argc, argv);
            } else if (strcmp(argv0, "cjpegli") == 0) {
              return cmd_cjpegli_main(argc, argv);
            } else if (strcmp(argv0, "djpegli") == 0) {
              return cmd_djpegli_main(argc, argv);
            } else {
              argv++;
              argc--;
              if (argc <= 0) {
                return 1;
              }
              argv0 = strrchr(argv[0], PATH_SEPARATOR);
              if (argv0 == NULL) {
                argv0 = argv[0];
              } else {
                argv0++;
              }
              goto before;
            }
            return 0;
          }
          EOF
          sed -i tools/jxlinfo.c -e 's|name = malloc|name = (char*)malloc|g'
          sed -i tools/jxlinfo.c -e 's|int main(|int cmd_jxlinfo_main(int argc, const char** argv){//|'
          sed -i tools/cjxl_main.cc -e 's|int main(|int cmd_cjxl_main(int argc, const char** argv){//|'
          sed -i tools/djxl_main.cc -e 's|int main(|int cmd_djxl_main(int argc, const char** argv){//|'
          sed -i tools/cjpegli.cc -e 's|int main(|int cmd_cjpegli_main(|' -e 's|namespace {|namespace cjpegli{|' -e 's|::CJpegliMain|::cjpegli::CJpegliMain|'
          sed -i tools/djpegli.cc -e 's|int main(|int cmd_djpegli_main(|' -e 's|namespace {|namespace djpegli{|' -e 's|::DJpegliMain|::djpegli::DJpegliMain|'
          sed -i tools/CMakeLists.txt -e 's|# Main compressor.|add_executable\(multicall multicall.cc\)\ntarget_link_libraries\(multicall jxl jxl_extras_codec jxl_extras-internal jxl_threads jxl_tool\)\nendif\(\)\nif\(0\)|'
          cd ..
          tar -cf jpegxl.tar --dereference jpegxl
  linux-x64:
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - name: Restore Cache Tar
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          key: "asset_jpegxl_8835f5d"
          path: jpegxl.tar
      - name: Build
        shell: sudo bash -e {0}
        run: |
          tar -xf jpegxl.tar --strip-components 1
          apt update
          apt install -y pkg-config cmake ninja-build
          apt remove -y libc6-dev # fix error: The header search paths should contain the C++ Standard Library headers before any C Standard Library
          apt download -y zlib1g-dev
          dpkg --force-depends -i *.deb
          curl -L https://ziglang.org/download/0.12.0/zig-linux-x86_64-0.12.0.tar.xz | tar -Jx
          mv zig-* _zig
          echo "$(pwd)/_zig/zig ar "'$*' > /usr/bin/ar ; chmod +x  /usr/bin/ar
          echo "$(pwd)/_zig/zig cc -s -target x86_64-linux-gnu.2.31 "'$*' > _zig/_cc ; chmod +x _zig/_cc # debian oldstable
          echo "$(pwd)/_zig/zig c++ -s -target x86_64-linux-gnu.2.31 "'$*' > _zig/_cxx ; chmod +x _zig/_cxx
          export CC="$(pwd)/_zig/_cc"
          export CXX="$(pwd)/_zig/_cxx"
cd third_party/libjpeg-turbo
cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
cmake --build build
cd ../..
cd third_party/zlib
cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
cmake --build build
cd ../..
cd third_party/libpng
cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
cmake --build build
cd ../..
          sed -i '1i\#define __builtin_cpu_supports(args...) 1 ' ./lib/jxl/enc_fast_lossless.cc # https://github.com/ziglang/zig/issues/18074
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_TESTING=OFF -DJPEGXL_STATIC=ON -DJPEGXL_ENABLE_BENCHMARK=OFF -DJPEGXL_ENABLE_DOXYGEN=OFF -DJPEGXL_ENABLE_MANPAGES=OFF -DJPEGXL_ENABLE_JNI=OFF -DJPEGXL_ENABLE_SJPEG=OFF -DJPEGXL_ENABLE_OPENEXR=OFF -DJPEGXL_ENABLE_DEVTOOLS=OFF -DJPEGXL_ENABLE_AVX512=OFF \
            -DZLIB_INCLUDE_DIR=/usr/include -DZLIB_LIBRARY=/usr/lib/x86_64-linux-gnu/libz.a DPNG_PNG_INCLUDE_DIR=/usr/include/png -DPNG_LIBRARY=/usr/lib/x86_64-linux-gnu/libpng.a -DGIF_INCLUDE_DIR=/usr/include -DGIF_LIBRARY=/usr/lib/x86_64-linux-gnu/libgif.a
            #  -DPNG_PNG_INCLUDE_DIR=/usr/include/png -DPNG_LIBRARY=/usr/lib/x86_64-linux-gnu/libpng.a -DJPEG_INCLUDE_DIR=/usr/include/x86_64-linux-gnu -DJPEG_LIBRARY=/usr/lib/x86_64-linux-gnu/libjpeg.a -DGIF_INCLUDE_DIR=/usr/include -DGIF_LIBRARY=/usr/lib/x86_64-linux-gnu/libgif.a
          # sed -i build/CMakeFiles/rules.ninja -e "s|/usr/bin/ar|$(pwd)/_zig/zig ar|"
          # for v in $(ls _zig/lib/libcxx/include/); do rm -rf /usr/include/$v ; done # WHAT THE FUCK IS THIS?
          cmake --build build
          mv build/tools/multicall ./jpegxl
          strip ./jpegxl
          zip -9 linux-x64.zip jpegxl
      - name: Verify
        run: |
          ldd ./jpegxl || true
          ./jpegxl cjxl -V
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "`github.workflow_sha = ${{ github.workflow_sha }}`"
          prerelease: true
          tag_name: "${{ 'asset_jpegxl_8835f5d_' }}${{ github.run_id }}"
          files: linux-x64.zip
  win-x64:
    needs: prepare
    runs-on: windows-2022
    steps:
      - name: Restore Cache Tar
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          key: "asset_jpegxl_8835f5d"
          path: jpegxl.tar
      - name: Build
        shell: C:\msys64\msys2_shell.cmd -mingw64 -defterm -here -no-start -e {0}
        run: |
          tar -xf jpegxl.tar --strip-components 1
          pacman -S --noconfirm mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc zip mingw-w64-x86_64-libpng mingw-w64-x86_64-libjpeg mingw-w64-x86_64-openexr mingw-w64-x86_64-giflib
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF  -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" -DJPEGXL_STATIC=ON  -DBUILD_TESTING=OFF -DJPEGXL_ENABLE_JPEGLI_LIBJPEG=OFF -DJPEGXL_ENABLE_VIEWERS=OFF -DJPEGXL_ENABLE_PLUGINS=OFF -DJPEGXL_ENABLE_OPENEXR=OFF -DJPEGXL_ENABLE_DEVTOOLS=ON
          cmake --build build
          mv build/tools/multicall.exe ./jpegxl.exe
          strip ./jpegxl.exe
          zip -9 win-x64.zip jpegxl.exe
      - name: Verify
        run: |
          ./jpegxl.exe cjxl -V
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "`github.workflow_sha = ${{ github.workflow_sha }}`"
          prerelease: true
          tag_name: "${{ 'asset_jpegxl_8835f5d_' }}${{ github.run_id }}"
          files: win-x64.zip
