name: asset_webp
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  linux-x64:
    runs-on: ubuntu-22.04
    steps:
      - name: Build
        shell: sudo bash -e {0}
        run: |
          curl -L https://github.com/webmproject/libwebp/archive/refs/tags/v1.4.0.tar.gz | tar -zx --strip-components 1
          cat <<EOF >multicall.c
          #include <stddef.h>
          #include <string.h>
          int cmd_cwebp_main(int argc, const char* argv[]);
          int cmd_dwebp_main(int argc, const char* argv[]);
          int cmd_gif2webp_main(int argc, const char* argv[]);
          int cmd_img2webp_main(int argc, const char* argv[]);
          int cmd_webpinfo_main(int argc, const char* argv[]);
          int cmd_webpmux_main(int argc, const char* argv[]);
          #if defined(WIN32) || defined(_WIN32)
          #define PATH_SEPARATOR '\\\\'
          #else
          #define PATH_SEPARATOR '/'
          #endif
          int main(int argc, const char *argv[]) {
            if (argc <= 0) {
              return 1;
            }
            const char *argv0 = strrchr(argv[0], PATH_SEPARATOR);
            if (argv0 == NULL) {
              argv0 = argv[0];
            } else {
              argv0++;
            }
          before:
            if (argc <= 0) {
              return 1;
            } else if (strcmp(argv0, "cwebp") == 0) {
              return cmd_cwebp_main(argc, argv);
            } else if (strcmp(argv0, "dwebp") == 0) {
              return cmd_dwebp_main(argc, argv);
            } else if (strcmp(argv0, "gif2webp") == 0) {
              return cmd_gif2webp_main(argc, argv);
            } else if (strcmp(argv0, "img2webp") == 0) {
              return cmd_img2webp_main(argc, argv);
            } else if (strcmp(argv0, "webpinfo") == 0) {
              return cmd_webpinfo_main(argc, argv);
            } else if (strcmp(argv0, "webpmux") == 0) {
              return cmd_webpmux_main(argc, argv);
            } else {
              argv++;
              argc--;
              if (argc <= 0) {
                return 1;
              }
              argv0 = strrchr(argv[0], PATH_SEPARATOR);
              if (argv0 == NULL) {
                argv0 = argv[0];
              } else {
                argv0++;
              }
              goto before;
            }
            return 0;
          }
          EOF
          apt update
          apt install -y build-essential pkg-config cmake ninja-build libgif-dev libjpeg-dev libpng-dev
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWEBP_USE_THREAD=OFF
          cmake --build build
          objcopy --redefine-sym main=cmd_cwebp_main ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.o
          objcopy --redefine-sym main=cmd_dwebp_main ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.o
          objcopy --redefine-sym main=cmd_gif2webp_main ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.o
          objcopy --redefine-sym main=cmd_img2webp_main ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.o
          objcopy --redefine-sym main=cmd_webpinfo_main ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.o
          objcopy --redefine-sym main=cmd_webpmux_main ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.o
          gcc -o webp -s -O3 multicall.c  ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.o ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.o ./build/CMakeFiles/gif2webp.dir/examples/gifdec.c.o ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.o ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.o ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.o ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.o -L build -l exampleutil -l imageenc -l imagedec -l imageioutil -l webp -l webpmux -l webpdemux -l webpdecoder -l extras -l sharpyuv -l:libpng.a -l:libjpeg.a -l:libgif.a -lm -lz -lpthread
          zip -9 linux-x64.zip webp
      - name: Verify
        run: |
          ldd ./webp || true
          ./webp cwebp -version
          ./webp gif2webp -version
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "`github.workflow_sha = ${{ github.workflow_sha }}`"
          prerelease: true
          tag_name: "${{ 'asset_webp_1.4.0_' }}${{ github.run_id }}"
          files: linux-x64.zip
  mac-arm64:
    runs-on: macos-14
    steps:
      - name: Build
        run: |
          curl -L https://github.com/webmproject/libwebp/archive/refs/tags/v1.4.0.tar.gz | tar -zx --strip-components 1
          cat <<EOF >multicall.c
          #include <stddef.h>
          #include <string.h>
          int cmd_cwebp_main(int argc, const char* argv[]);
          int cmd_dwebp_main(int argc, const char* argv[]);
          int cmd_gif2webp_main(int argc, const char* argv[]);
          int cmd_img2webp_main(int argc, const char* argv[]);
          int cmd_webpinfo_main(int argc, const char* argv[]);
          int cmd_webpmux_main(int argc, const char* argv[]);
          #if defined(WIN32) || defined(_WIN32)
          #define PATH_SEPARATOR '\\\\'
          #else
          #define PATH_SEPARATOR '/'
          #endif
          int main(int argc, const char *argv[]) {
            if (argc <= 0) {
              return 1;
            }
            const char *argv0 = strrchr(argv[0], PATH_SEPARATOR);
            if (argv0 == NULL) {
              argv0 = argv[0];
            } else {
              argv0++;
            }
          before:
            if (argc <= 0) {
              return 1;
            } else if (strcmp(argv0, "cwebp") == 0) {
              return cmd_cwebp_main(argc, argv);
            } else if (strcmp(argv0, "dwebp") == 0) {
              return cmd_dwebp_main(argc, argv);
            } else if (strcmp(argv0, "gif2webp") == 0) {
              return cmd_gif2webp_main(argc, argv);
            } else if (strcmp(argv0, "img2webp") == 0) {
              return cmd_img2webp_main(argc, argv);
            } else if (strcmp(argv0, "webpinfo") == 0) {
              return cmd_webpinfo_main(argc, argv);
            } else if (strcmp(argv0, "webpmux") == 0) {
              return cmd_webpmux_main(argc, argv);
            } else {
              argv++;
              argc--;
              if (argc <= 0) {
                return 1;
              }
              argv0 = strrchr(argv[0], PATH_SEPARATOR);
              if (argv0 == NULL) {
                argv0 = argv[0];
              } else {
                argv0++;
              }
              goto before;
            }
            return 0;
          }
          EOF
          brew install llvm ninja giflib jpeg-turbo libpng
          sudo cp /opt/homebrew/include/gif_lib.h /Library/Frameworks/Mono.framework/Versions/6.12.0/include/gif_lib.h
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWEBP_USE_THREAD=OFF
          cmake --build build
          objcopy="$(brew --prefix llvm)/bin/llvm-objcopy"
          $objcopy --redefine-sym _main=_cmd_cwebp_main ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.o
          $objcopy --redefine-sym _main=_cmd_dwebp_main ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.o
          $objcopy --redefine-sym _main=_cmd_gif2webp_main ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.o
          $objcopy --redefine-sym _main=_cmd_img2webp_main ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.o
          $objcopy --redefine-sym _main=_cmd_webpinfo_main ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.o
          $objcopy --redefine-sym _main=_cmd_webpmux_main ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.o
          gcc -o webp -s -O3 multicall.c  ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.o ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.o ./build/CMakeFiles/gif2webp.dir/examples/gifdec.c.o ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.o ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.o ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.o ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.o -L build -l exampleutil -l imageenc -l imagedec -l imageioutil -l webp -l webpmux -l webpdemux -l webpdecoder -l extras -l sharpyuv -lm -lz /opt/homebrew/lib/libpng.a /opt/homebrew/lib/libjpeg.a /opt/homebrew/lib/libgif.a -lpthread
          zip -9 mac-arm64.zip webp
      - name: Verify
        run: |
          otool -L ./webp || true
          ./webp cwebp -version
          ./webp gif2webp -version
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "`github.workflow_sha = ${{ github.workflow_sha }}`"
          prerelease: true
          tag_name: "${{ 'asset_webp_1.4.0_' }}${{ github.run_id }}"
          files: mac-arm64.zip
  win-x64:
    runs-on: windows-2022
    steps:
      - name: Build
        shell: C:\msys64\msys2_shell.cmd -mingw64 -defterm -here -no-start -e {0}
        run: |
          curl -L https://github.com/webmproject/libwebp/archive/refs/tags/v1.4.0.tar.gz | tar -zx --strip-components 1
          cat <<EOF >multicall.c
          #include <stddef.h>
          #include <string.h>
          int cmd_cwebp_main(int argc, const char* argv[]);
          int cmd_dwebp_main(int argc, const char* argv[]);
          int cmd_gif2webp_main(int argc, const char* argv[]);
          int cmd_img2webp_main(int argc, const char* argv[]);
          int cmd_webpinfo_main(int argc, const char* argv[]);
          int cmd_webpmux_main(int argc, const char* argv[]);
          #if defined(WIN32) || defined(_WIN32)
          #define PATH_SEPARATOR '\\\\'
          #else
          #define PATH_SEPARATOR '/'
          #endif
          int main(int argc, const char *argv[]) {
            if (argc <= 0) {
              return 1;
            }
            const char *argv0 = strrchr(argv[0], PATH_SEPARATOR);
            if (argv0 == NULL) {
              argv0 = argv[0];
            } else {
              argv0++;
            }
          before:
            if (argc <= 0) {
              return 1;
            } else if (strcmp(argv0, "cwebp") == 0) {
              return cmd_cwebp_main(argc, argv);
            } else if (strcmp(argv0, "dwebp") == 0) {
              return cmd_dwebp_main(argc, argv);
            } else if (strcmp(argv0, "gif2webp") == 0) {
              return cmd_gif2webp_main(argc, argv);
            } else if (strcmp(argv0, "img2webp") == 0) {
              return cmd_img2webp_main(argc, argv);
            } else if (strcmp(argv0, "webpinfo") == 0) {
              return cmd_webpinfo_main(argc, argv);
            } else if (strcmp(argv0, "webpmux") == 0) {
              return cmd_webpmux_main(argc, argv);
            } else {
              argv++;
              argc--;
              if (argc <= 0) {
                return 1;
              }
              argv0 = strrchr(argv[0], PATH_SEPARATOR);
              if (argv0 == NULL) {
                argv0 = argv[0];
              } else {
                argv0++;
              }
              goto before;
            }
            return 0;
          }
          EOF
          pacman -S --noconfirm mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc zip mingw-w64-x86_64-libpng mingw-w64-x86_64-libjpeg mingw-w64-x86_64-giflib
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWEBP_USE_THREAD=OFF -DWEBP_UNICODE=OFF # libwebp's unicode.h contains lots of magics
          cmake --build build
          objcopy --redefine-sym main=cmd_cwebp_main ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.obj
          objcopy --redefine-sym main=cmd_dwebp_main ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.obj
          objcopy --redefine-sym main=cmd_gif2webp_main ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.obj
          objcopy --redefine-sym main=cmd_img2webp_main ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.obj
          objcopy --redefine-sym main=cmd_webpinfo_main ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.obj
          objcopy --redefine-sym main=cmd_webpmux_main ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.obj
          gcc -o webp.exe -s -O3 -static multicall.c  ./build/CMakeFiles/cwebp.dir/examples/cwebp.c.obj ./build/CMakeFiles/dwebp.dir/examples/dwebp.c.obj ./build/CMakeFiles/gif2webp.dir/examples/gifdec.c.obj ./build/CMakeFiles/gif2webp.dir/examples/gif2webp.c.obj ./build/CMakeFiles/img2webp.dir/examples/img2webp.c.obj ./build/CMakeFiles/webpinfo.dir/examples/webpinfo.c.obj ./build/CMakeFiles/webpmux.dir/examples/webpmux.c.obj -L build -l exampleutil -l imageenc -l imagedec -l imageioutil -l webp -l webpmux -l webpdemux -l webpdecoder -l extras -l sharpyuv -l:libpng.a -l:libjpeg.a -l:libgif.a -lm -l:libz.a -lole32 -lshlwapi
          zip -9 win-x64.zip webp.exe
      - name: Verify
        shell: C:\msys64\msys2_shell.cmd -mingw64 -defterm -here -no-start -e {0}
        run: |
          ldd ./webp.exe || true
          ./webp.exe cwebp -version
          ./webp.exe gif2webp -version
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: "`github.workflow_sha = ${{ github.workflow_sha }}`"
          prerelease: true
          tag_name: "${{ 'asset_webp_1.4.0_' }}${{ github.run_id }}"
          files: win-x64.zip
# https://github.com/webmproject/libwebp/blob/v1.4.0/doc/building.md
# https://github.com/webmproject/libwebp/blob/v1.4.0/CMakeLists.txt
